CREATE TABLE Users (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    email VARCHAR UNIQUE NOT NULL,
    password VARCHAR(256) NOT NULL,
    firstname VARCHAR(256) NOT NULL,
    lastname VARCHAR(256) NOT NULL,
    balance INT NOT NULL,
    address VARCHAR(255) NOT NULL,
);

CREATE TABLE Seller (
    SellerID INT NOT NULL PRIMARY KEY, 
    FOREIGN KEY (SellerID) REFERENCES User(id)
);
 
CREATE TABLE Products (
    productID INT NOT NULL,
    name VARCHAR(256) UNIQUE NOT NULL,
    description VARCHAR(256) NOT NULL,
    category VARCHAR(256) NOT NULL,
    unitPrice FLOAT NOT NULL,
    CHECK(price > 0.0),
    Inventory INT NOT NULL,
    CHECK(Inventory > -1),
    SellerID INT NOT NULL,
    PRIMARY KEY(id, SellerID),
    FOREIGN KEY(SellerID) REFERENCES Seller(SellerID) 
);
 
CREATE TABLE Purchases (
    SellerID INT NOT NULL,
    FOREIGN KEY (SellerID) REFERENCES Seller(SellerID),
    uid INT NOT NULL,
    FOREIGN KEY (uid) REFERENCES User(id),
    pid INT NOT NULL,
    FOREIGN KEY (pid) REFERENCES Products(id),
    orderDateTime timestamp without time zone NOT NULL DEFAULT (current_timestamp AT  TIME ZONE 'UTC'),
    finalUnitPrice INT ,
	quantity INT NOT NULL,
    CHECK(quantity >= 1), 
    fufullmentstatus VARCHAR(256) NOT NULL, 
    fulfillment_datetime timestamp without time zone, 
    PRIMARY KEY(SellerID, uid, pid, time_purchased)
);
 
CREATE TABLE Cart (
	uid INT NOT NULL REFERENCES USER(id),
	pid INT NOT NULL,
	sid INT NOT NULL REFERENCES SELLER(SellerId),
	quantity INT NOT NULL,
	CHECK(quantity >= 1),
	PRIMARY KEY(uid, pid, sid)
);
 
CREATE TABLE ProductReview (
	uid INT NOT NULL REFERENCES USER(id),
	pid INT NOT NULL REFERENCES PRODUCTS(id),
	rating FLOAT NOT NULL,
	CHECK (rating >= 1.0 AND rating <= 5.0),
	review VARCHAR(256),
	DateTime timestamp without time zone NOT NULL DEFAULT (current_timestamp AT TIME ZONE 'UTC'),
	PRIMARY KEY(uid, pid)
);
 
CREATE TABLE SellerReview (
	uid INT NOT NULL REFERENCES USER(id),
	sid INT NOT NULL REFERENCES SELLER(id),
	rating FLOAT NOT NULL,
	CHECK(rating >= 1.0 AND rating <= 5.0),
	review VARCHAR(256),
	DateTime timestamp without time zone NOT NULL DEFAULT (current_timestamp AT TIME ZONE 'UTC'),
	PRIMARY KEY(uid, sid)
	
);
 
-- trigger to check that the user has enough in their balance to make a purchase and deducts
-- cost of purchase from balance when possible
CREATE FUNCTION TF_Balance() RETURNS TRIGGER AS $$
BEGIN
 -- check to see if balance is sufficient for purchase
IF EXISTS(SELECT * FROM User
    WHERE uid = NEW.uid) AND (NEW.finalUnitPrice * NEW.quantity >= balance)) THEN
    RAISE EXCEPTION 'You do not have enough in your balance to complete this purchase';
END IF;
 -- deduct cost of purchase from balance
IF EXISTS(SELECT * FROM User
    WHERE uid = NEW.uid) THEN
    UPDATE balance set balance = balance - (NEW.finalUnitPrice * NEW.quantity);
END IF;
RETURN NEW;
END;
$$ LANGUAGE plpgsql;
 
CREATE FUNCTION removeCart() RETURNS TRIGGER AS $$
BEGIN
  IF EXISTS(SELECT * FROM Cart
    WHERE uid = NEW.uid AND pid = NEW.pid AND sid = NEW.sid)
  THEN
    DELETE FROM Cart WHERE uid = NEW.uid AND pid = NEW.pid AND sid = NEW.sid
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;
 
CREATE TRIGGER TF_Inventory  
BEFORE INSERT OR UPDATE ON Purchases
  FOR EACH ROW  EXECUTE PROCEDURE TF_Inventory();
 
CREATE TRIGGER TG_Balance
BEFORE INSERT ON Purchases
   FOR EACH ROW
   EXECUTE PROCEDURE TF_Balance()
   EXECUTE PROCEDURE removeCart();

 
CREATE FUNCTION TF_Inventory() RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS(SELECT * FROM Products
        WHERE productID = NEW.uid AND SellerID = NEW.SellerID AND inventory- quantity<0) THEN
        RAISE EXCEPTION '% does not have the desired amount in stock', NEW.uid;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
 
CREATE TRIGGER TF_Inventory
BEFORE INSERT OR UPDATE ON Purchases
  FOR EACH ROW  EXECUTE PROCEDURE TF_Inventory();
